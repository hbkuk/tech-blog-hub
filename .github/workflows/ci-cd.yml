name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest  # 최신 ubuntu 환경에서 실행

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Gradle 패키지 캐시
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}

      - name: Add execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Gradle로 빌드 및 테스트 실행
        run: ./gradlew clean build test

      - name: GitHub Container Registry에 로그인
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Docker 이미지 빌드
        run: docker build -t ghcr.io/${{ github.repository }}/my-app:latest .

      - name: GitHub Container Registry에 Docker 이미지 푸시
        run: docker push ghcr.io/${{ github.repository }}/my-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: EC2로 SSH하여 배포
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 호스트 주소
          username: ${{ secrets.EC2_USER }}  # EC2 사용자 이름
          key: ${{ secrets.EC2_SSH_KEY }}  # EC2 SSH 프라이빗 키
          script: |
            docker login ghcr.io -u ${{ secrets.GITHUB_ACTOR }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}/my-app:latest
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --name my-app -p 80:8080 ghcr.io/${{ github.repository }}/my-app:latest
        # EC2 인스턴스에 SSH로 접속하여 Docker 이미지를 가져오고, 기존 컨테이너를 중지 및 삭제한 후 새로운 컨테이너 실행
