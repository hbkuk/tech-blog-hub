name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 워크플로우 실행

jobs:
  build:
    runs-on: ubuntu-latest  # 최신 ubuntu 환경에서 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 소스 코드를 체크아웃

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'  # JDK 17 설정

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}
        # Gradle 캐시 설정, 빌드 시간을 단축하기 위해 사용

      - name: Build with Gradle
        run: ./gradlew build  # Gradle을 사용하여 프로젝트 빌드

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        # GitHub Container Registry에 로그인

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository }}/my-app:latest .
        # Docker 이미지를 빌드하고 태그 지정

      - name: Push Docker image to GitHub Container Registry
        run: docker push ghcr.io/${{ github.repository }}/my-app:latest
        # Docker 이미지를 GitHub Container Registry에 푸시

  deploy:
    needs: build  # build 작업 완료 후 실행
    runs-on: ubuntu-latest  # 최신 우분투 환경에서 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 소스 코드를 체크아웃

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker login ghcr.io -u ${{ secrets.GITHUB_ACTOR }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ghcr.io/${{ github.repository }}/my-app:latest
            docker stop my-app || true
            docker rm my-app || true
            docker run -d --name my-app -p 80:8080 ghcr.io/${{ github.repository }}/my-app:latest
        # EC2 인스턴스에 SSH로 접속하여 Docker 이미지를 가져오고, 기존 컨테이너를 중지 및 삭제한 후 새로운 컨테이너 실행
